on:
  push:
    tags:
      - v*
  workflow_dispatch:

env:
  RUST_VERSION: 1.86.0
  BIN_NAME: "bingtray"

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    # By default, runs on Ubuntu, otherwise, override with the desired os
    runs-on: ${{ matrix.platform.os || 'ubuntu-22.04' }}
    strategy:
      matrix:
        # Set platforms you want to build your binaries on
        platform:
          # Linux
          - name: Linux x86_64
            target: x86_64-unknown-linux-musl
            build-args: "--release"

          - name: Linux x86
            target: i686-unknown-linux-musl
            build-args: "--release"

          - name: Linux aarch64
            target: aarch64-unknown-linux-musl
            build-args: "--release"

          - name: Linux armv7hf
            target: armv7-unknown-linux-musleabihf
            build-args: "--release"

          - name: Linux armv6
            target: arm-unknown-linux-musleabihf
            build-args: "--release"

          # - name: Freebsd x86_64
          #   target: x86_64-unknown-freebsd
          #   build-args: "--release"

          # - name: Freebsd x86
          #   target: i686-unknown-freebsd
          #   build-args: "--release"

          - name: Android aarch64
            target: aarch64-linux-android
            build-args: "--release"

          - name: Android APK arm64
            target: aarch64-linux-android
            build-args: "--release"

          - name: Android armv7
            target: armv7-linux-androideabi
            build-args: "--release"

          #- name: Linux mips
          #  target: mips-unknown-linux-musl

          #- name: Linux mips64
          #  target: mips64-unknown-linux-muslabi64

          # Mac OS
          - name: MacOS x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            build-args: "--release"

          - name: MacOS aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            build-args: "--release"

          # - name: iOS x86_64
          #   target: x86_64-apple-ios

          #- name: iOS aarch64
          #  target: aarch64-apple-ios

          # Windows
          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            build-args: "--profile release-with-symbols"

          # - name: Windows x86
          #   os: windows-latest
          #   target: i686-pc-windows-msvc
          #   build-args: "--profile release-with-symbols"

    steps:
      - name: Linux, Build packages. set vars
        if: contains(matrix.platform.target, 'linux')
        run: | 
          sudo apt install musl-tools libgtk-3-dev libxdo-dev libappindicator3-dev libglib2.0-dev libgdk-pixbuf-2.0-dev libwayland-dev libcairo2-dev libpixman-1-dev libpango1.0-dev libxdo-dev librust-glib-sys-dev librust-gio-sys-dev librust-gobject-sys-dev librust-gdk-sys-dev libwebkit2gtk-4.1-dev librust-gdk-pixbuf-sys-dev librust-cairo-sys-rs-dev librust-pango-sys-dev librust-atk-sys-dev libgdk-pixbuf2.0-dev libatk1.0-dev musl-dev
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-musl/pkgconfig"
          
      - name: Android, Build packages.
        if: contains(matrix.platform.target, 'android')
        run: |
          sudo apt install android-libunwind android-libunwind-dev libunwind-dev musl-tools llvm-14 clang llvm

      - name: Checkout Git repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform.target }}
          components: rustfmt, clippy

      - name: Install package for Android
        if: contains(matrix.platform.target, 'android')
        run: | 
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Android, Build ${{ matrix.platform.name }} binary # android release apk/aab build
        if: (contains(matrix.platform.name, 'Android APK arm64'))
        run: | 
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > ./mobile/keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> ./mobile/keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> ./mobile/keystore.properties
          echo "storeFile=release.keystore" >> ./mobile/keystore.properties
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ./mobile/app/release.keystore
          echo "${{ secrets.STORE_PASSWORD }}" | keytool -list -v -keystore $PWD/mobile/app/release.keystore

          pushd mobile
          bash ./build.gh.sh
          cp ./app/build/outputs/apk/release/app-release.apk ./app/build/outputs/apk/release/bingtray-all-signed.apk
          ls -al ./app/build/outputs/apk/release
          popd
      
      # - name: Android, Publish to google play # https://github.com/marketplace/actions/upload-android-release-to-play-store
      #   if: (contains(matrix.platform.name, 'Android APK arm64'))
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
      #     packageName: pe.nikescar.bingtray
      #     releaseFiles: mobile/app/build/outputs/bundle/release/app-release.aab
      #     track: production
      #     inAppUpdatePriority: 2
      #     debugSymbols: mobile/app/build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib

      - name: Non Android, Native bingtray Build ${{ matrix.platform.name }} binary
        if: (contains(matrix.platform.target, 'x86_64') || contains(matrix.platform.target, 'aarch64') || contains(matrix.platform.target, 'armv7')) && !contains(matrix.platform.name, 'Android APK arm64')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.platform.build-args }} --package bingtray
      
      - name: Store artifact bingtray
        if: (!contains(matrix.platform.name, 'Android APK arm64'))
        uses: actions/upload-artifact@v4
        with:
          # Finally, we store the binary as GitHub artifact for later usage
          name: bingtray-${{ matrix.platform.target }}
          path: target/release${{ contains(matrix.platform.target, 'windows') && '-with-symbols' || '' }}/bingtray*
          retention-days: 1
      
      - name: Store artifact Android release arm64 apk
        if: (contains(matrix.platform.name, 'Android APK arm64'))
        uses: actions/upload-artifact@v4
        with:
          name: bingtray-all-signed.apk
          path: ./mobile/app/build/outputs/apk/release/bingtray-all-signed.apk
          retention-days: 1
      
  release:
    name: Release
    needs: [ build ]
    # We run the release job only if a tag starts with 'v' letter
    if: startsWith( github.ref, 'refs/tags/v' )
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Download all artifacts
      - uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: list artifacts
        run: |
          find artifacts/
          mkdir distbin/

          for i in ./artifacts/* 
          do
              if [ -d "$i" ]
              then
                  [[ "$i" == *"bingtray-all-signed.apk"* ]] && cp artifacts/bingtray-all-signed.apk/bingtray-all-signed.apk distbin/bingtray-all-signed.apk && continue
                  cp LICENSE* "$i"
                  cp README.md "$i"
                  rm "$i/bingtray.d" 1>/dev/null 2>&1 || true
                  chmod +x "$i/bingtray" 1>/dev/null 2>&1 || true
                  chmod +x "$i/bingtray.exe" 1>/dev/null 2>&1 || true
                  tar -cvpzf "${i}.tar.gz" --directory=${i} .
              fi
          done
          cp artifacts/bing*.tar.gz distbin/
        
      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
          # draft: true
          make_latest: true
          files: distbin/*
          token: ${{ secrets.RELEASE_TOKEN }}

